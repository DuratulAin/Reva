import streamlit as st
import pandas as pd
import joblib
import requests
#import matplotlib.pyplot as plt
#import tensorflow as tf

# Function to retrieve data from Xano and save it as a CSV file
def retrieve_data():
    xano_api_endpoint_bg = 'https://x8ki-letl-twmt.n7.xano.io/api:U4wk_Gn6/BackgroundReading'
    payload_bg = {}
    response_bg = requests.get(xano_api_endpoint_bg, params=payload_bg)

    if response_bg.status_code == 200:
        data_bg = response_bg.json()
    else:
        error_message = "Failed to retrieve data. Status code: " + str(response_bg.status_code)
        st.error(error_message)
        return None

    xano_api_endpoint_spectral = 'https://x8ki-letl-twmt.n7.xano.io/api:DKaWNKM4/spectral_data'
    payload_spectral = {}
    response_spectral = requests.get(xano_api_endpoint_spectral, params=payload_spectral)

    if response_spectral.status_code == 200:
        data_spectral = response_spectral.json()
    else:
        error_message = "Failed to retrieve data. Status code: " + str(response_spectral.status_code)
        st.error(error_message)
        return None

    # Extract first line and convert to numeric
    df_bg = pd.DataFrame(data_bg).iloc[:1].apply(pd.to_numeric, errors='coerce')
    df_spectral = pd.DataFrame(data_spectral).iloc[:1].apply(pd.to_numeric, errors='coerce')
    wavelength = df_bg.columns

    # Calculate absorbance
    absorbance = df_bg.div(df_spectral.values).pow(2)

    absorbance.to_csv('absorbanceData.csv', index=False)
    return absorbance

# Function to load a model from a pickle file
def load_model(model_file):
    with open(model_file, 'rb') as f:
        model = joblib.load(f)
    return model

# Main Streamlit app
def main():
    st.title('Model Prediction App')

    # Retrieve and plot data
    data = retrieve_data()

    # Load the CSV data of original data
    original_data = pd.read_csv('Raw data all.csv')

    # Combine both datas
    combined_data = pd.concat([xano_data_df, original_data], ignore_index=True)

    # st.dataframe(xano_data_df)
    # st.dataframe(original_data)  # Uncomment if you want to display the original data as well
    # st.dataframe(combined_data)

    # Load the UMAP model from the joblib file
    umap_model = load_model('umap_model_new_10.joblib').transform(combined_data)

    # Load the Linear Regression model and make a prediction
    linear_reg_model = load_model('linear_reg_model_new_10.joblib')
    linear_reg_prediction = linear_reg_model.predict(combined_data)

    # Load the Decision Tree model and make a prediction
    decision_tree_model = load_model('decision_tree_model_new_10.joblib')
    decision_tree_prediction = decision_tree_model.predict(combined_data)

    # Load the Linear Regression model with UMAP and make prediction
    linear_reg_model_umap = load_model('linear_reg_model_new_umap_10.joblib')
    linear_reg_umap_pred = linear_reg_model_umap.predict(umap_model)

    # Load the Decision Tree model with UMAP and make prediction
    decision_tree_model_umap = load_model('decision_tree_model_new_umap_10.joblib')
    decision_tree_umap_pred = decision_tree_model_umap.predict(umap_model)

    # Display predictions from both models in a larger and bold format
    st.markdown('<font size="6"><b>Predictions:</b></font>', unsafe_allow_html=True)
    st.markdown('**Linear Regression Model:**')
    st.markdown(f'<font size="5"><b>{linear_reg_prediction[0]} g/dL</b></font>', unsafe_allow_html=True)
    st.markdown('**Decision Tree Model:**')
    st.markdown(f'<font size="5"><b>{decision_tree_prediction[0]} g/dL</b></font>', unsafe_allow_html=True)
    st.markdown('**Linear Regression Model with UMAP:**')
    st.markdown(f'<font size="5"><b>{linear_reg_umap_pred[0]:.1f} g/dL</b></font>', unsafe_allow_html=True)
    st.markdown('**Decision Tree Model with UMAP:**')
    st.markdown(f'<font size="5"><b>{decision_tree_umap_pred[0]} g/dL</b></font>', unsafe_allow_html=True)


if __name__ == "__main__":
    main()
